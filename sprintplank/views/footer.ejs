        </div>
      </div>
    </div>
    <!-- ========================= end of page contents ========================= -->
    <script type="text/javascript" src="/jquery.js"></script>
    <script type="text/javascript" src="/bootstrap.js"></script>
    <script type="text/javascript" src="/simplemde.js"></script>
    <script type="text/javascript" src="/jquery-easing.js"></script>
    <script type="text/javascript" src="/jquery-ui.js"></script>
    <script type="text/javascript" src="/codemirror.js"></script>
    <script type="text/javascript" src="/codemirror-javascript.js"></script>
    <script>
      $(document).ready (function () {
        const markdown_editor = <%- markdown_editor %>;
        const file_editor = <%- editor %>;
        const menu_editor = <%- edit_menu %>;
        const modify_date = <%- date %>;

        if (file_editor) {
          let file_path = "<%- file %>";
          var getFile = "/getfile/?f="+file_path;

          if (!markdown_editor) {
            getFile += "&t=raw";
          }

          $.getJSON (getFile, function (file_data) {
            let getDate = new Date (file_data.date);
            let fileDate = getDate.getFullYear () + '-' +
                            ((getDate.getMonth () < 9) ?
                              '0' + (getDate.getMonth () + 1) :
                              getDate.getMonth () + 1)
                            + '-'  +
                            ((getDate.getDate () <= 9) ?
                              '0' + getDate.getDate () :
                              getDate.getDate ());

            if (markdown_editor) {
              $('#fileTitle').val (file_data.title);
              $('#fileDate').val (fileDate)

              if (!(modify_date)) {
                $('#fileDate').attr ('disabled', 'disabled');
              }

              const simple_mde = new SimpleMDE ({
                      autofocus: true,
                      indentWithTabs: false,
                      forceSync: true,
                      element: $('#fileContent')[0]
                  });

              simple_mde.value (file_data.content);
            } else {
              $('#fileForm #fileName').html (file_data.name);
              $('#fileDate').html (fileDate);
              $('#fileContent').val (file_data.content);

              if (file_data.name == "app.js") {
                $('#fileForm #fileDelete').css ('display', 'none');
              }

              const codemirror = CodeMirror.fromTextArea ($('#fileContent')[0], {
                lineNumbers: true
              });

              codemirror.on ("change", function() {
                codemirror.save();
		          });
            }
          });

          function submitFile () {
              let savedFile = {
                      file: file_path,
                      markdown: markdown_editor,
                      content: $('#fileContent').val ()
                  }

              if (markdown_editor) {
                savedFile.title = $('#fileTitle').val ();
                savedFile.date = $('#fileDate').val ();
              }

              $.post ('/save', savedFile, function (dt, st) {
                $('#fileSaved'). fadeIn (120, function () {
                  setTimeout (function () {
                      $('#fileSaved').fadeOut (200);
                    }, 1500);
                });
              }).fail (function() {
                $('#fileError'). fadeIn (120, function () {
                  setTimeout (function () {
                      $('#fileError').fadeOut (200);
                    }, 1500);
                });
              });
          }

          setTimeout (submitFile, 3 * 60 * 1000);

          $('#fileForm').submit (function (event) {
            event.preventDefault ();
            submitFile ();
          });

          $("#fileDelete").click (function (event) {
            event.preventDefault ();
            $('#deleteConfirm').modal ();
            $('#deleteConfirm .delete').click (function (event) {
              document.location = "/delete/?p=&f="+file_path;
            });
          });
        }

        if (menu_editor) {
          function getMenu () {
            $('#menu-items').empty ();
            $('#page-items').empty ();
            $.getJSON ('/getmenu', function (menu_object) {
              menu_object.menu.forEach (i => {
                $('#menu-items').append ('<tr class="text-center"> \
                                            <td class="menu-item" data-item="' + i.item + '"> \
                                              <strong>' + i.item + '</strong> \
                                            </td> \
                                            <td class="menu-link" data-link="' + i.link + '">' + i.link + '</td> \
                                            <td> \
                                              <a ref="delMenuItem" href="#"> \
                                                <i class="fas fa-fw fa-trash-alt"></i> \
                                              </a> \
                                            </td> \
                                            <td class="menu-handle"> \
                                              <i class="fas fa-fw fa-lg fa-grip-lines"></i> \
                                            </td> \
                                          </tr>');
              });

              menu_object.pages.forEach (i => {
                $('#page-items').append ('<tr class="text-center"> \
                                            <td class="add-page-item" data-item="' + i.item + '"> \
                                              <strong>' + i.item + '</strong> \
                                            </td> \
                                            <td class="add-page-link" data-link="' + i.link + '">' + i.link + '</td> \
                                            <td> \
                                              <a ref="addMenuItem" href="#"> \
                                                <i class="fas fa-fw fa-lg fa-plus-circle"></i> \
                                              </a> \
                                            </td> \
                                          </tr>');
              });
              $('#page-items').append ('<tr class="text-center"> \
                                            <td> \
                                              <input type="text" class="form-control" id="custom-menu-item" placeholder="custom menu item" /> \
                                            </td> \
                                            <td> \
                                              <input type="text" class="form-control" id="custom-menu-link" placeholder="custom link" /> \
                                            </td> \
                                            <td> \
                                              <a id="addMenuCustom" href="#"> \
                                                <i class="fas fa-fw fa-2x fa-plus-circle"></i> \
                                              </a> \
                                            </td> \
                                          </tr>');
            });
            $('#menu-items').sortable ({handle: '.menu-handle'});

          }

          function updateMenu () {
            let new_order = [];
            $('#menu-items tr').each (function (e) {
              new_order.push ({item: $(this).find ('.menu-item').attr ('data-item'), link: $(this).find ('.menu-link').attr ('data-link')});
            });
            $.post ('/updatemenu', 'menu=' + JSON.stringify (new_order));
          }

          getMenu ();

          $('#menu-items').on ('sortupdate', function (ev, ui) {
            updateMenu ();
          });

          $(document).on ('click', "a[ref|='delMenuItem']", function (e) {
            e.preventDefault ();
            $(this).parent ().parent ().remove ();
            updateMenu ();
            getMenu ();
          });

          $(document).on ('click', "a[ref|='addMenuItem']", function (e) {
            e.preventDefault ();
            let add_item = $(this).parent ().parent ().find ('.add-page-item').attr ('data-item');
            let add_link = $(this).parent ().parent ().find ('.add-page-link').attr ('data-link');
            $('#menu-items').append ('<tr class="text-center"> \
                                        <td class="menu-item" data-item="' + add_item + '"> \
                                          <strong>' + add_item + '</strong> \
                                        </td> \
                                        <td class="menu-link" data-link="' + add_link + '">' + add_link + '</td> \
                                        <td> \
                                          <a ref="delMenuItem" href="#"> \
                                            <i class="fas fa-fw fa-trash-alt"></i> \
                                          </a> \
                                        </td> \
                                        <td class="menu-handle"> \
                                          <i class="fas fa-fw fa-lg fa-grip-lines"></i> \
                                        </td> \
                                      </tr>');
            $(this).parent ().parent ().remove ();
            updateMenu ();
          });

          $(document).on ('click', "#addMenuCustom", function (e) {
            e.preventDefault ();
            let custom_item = $(this).parent ().parent ().find ('#custom-menu-item');
            let custom_link = $(this).parent ().parent ().find ('#custom-menu-link');

            if (custom_item.val ().length <= 1) {
              custom_item.addClass ('is-invalid');
              return;
            } else {
              custom_item.removeClass ('is-invalid');
            }

            if (custom_link.val ().length <= 1) {
              custom_link.addClass ('is-invalid');
              return;
            } else {
              custom_link.removeClass ('is-invalid');
            }

            $('#menu-items').append ('<tr class="text-center"> \
                                        <td class="menu-item" data-item="' + custom_item.val () + '"> \
                                          <strong>' + custom_item.val () + '</strong> \
                                        </td> \
                                        <td class="menu-link" data-link="' + custom_link.val () + '">' + custom_link.val () + '</td> \
                                        <td> \
                                          <a ref="delMenuItem" href="#"> \
                                            <i class="fas fa-fw fa-trash-alt"></i> \
                                          </a> \
                                        </td> \
                                        <td class="menu-handle"> \
                                          <i class="fas fa-fw fa-lg fa-grip-lines"></i> \
                                        </td> \
                                      </tr>');

            custom_item.val ('');
            custom_item.removeClass ('is-invalid');
            custom_link.val ('');
            custom_link.removeClass ('is-invalid');
          });

        }

        $("#sidebarToggle, #sidebarToggleTop").on ('click', function (e) {
          $("body").toggleClass ("sidebar-toggled");
          $(".sidebar").toggleClass ("toggled");

          if ($(".sidebar").hasClass ("toggled")) {
            $('.sidebar .collapse').collapse ('hide');
          };
        });

        $(window).resize (function () {
          if ($(window).width() < 768) {
           $('.sidebar .collapse').collapse ('hide');
          };
        });

        $("a[ref|='delete']").click (function (event) {
          event.preventDefault ();
          var $self = $(this);
          $('#deleteConfirm').modal ();
          $('#deleteConfirm .delete').click (function (event) {
            document.location = $self.attr ('href');
          });
        });

        $("a[ref|='addNew']").click (function (e) {
          e.preventDefault ();
          var $self = $(this);
          $('#addNew').modal ();
          $('#addNew').find ('.modal-title').html ($self.attr ('data-modal-title'));
          $('#addNew .createNew').click (function (e) {
            e.preventDefault ();
            let new_name = $('#addNew #fileName');
            if (new_name.val ().length <= 1) {
              new_name.addClass ('is-invalid');
            } else {
              new_name.removeClass ('is-invalid').addClass ('is-valid');
              setTimeout (function () {
                document.location = $self.attr ('href') + '&t=' + new_name.val ();
              }, 500);
            }
          });
        });


        $('#searchInput').focus (function () {
          let self = $('#searchInput');

          var clearSearch = function () {
            self.val ('');
            $('.searchable').parent ().css ('display', 'table-row');
          };

          self.on ('change paste copy cut keyup', function (e) {
            if (e.key == 'Escape') {
              clearSearch ();
              return;
            }

            $('.searchable').parent ().css ('display', 'none');
            $('.searchable').filter (function () {
                let regex = new RegExp ('.*' + self.val ().toLowerCase () + '.*');
                return $(this).html ().toLowerCase ().match (regex);
              }).parent ().css ('display', 'table-row');
          });

          self.focusout (clearSearch);
        });

        $('#uploadMedia').change (function (e) {
          let uploadFile = new FormData ();
              uploadFile.append ('file', e.target.files [0]);

            $.ajax ({
              url: "/upload/media",
              type: "POST",
              data:  uploadFile,
              contentType: false,
              cache: false,
              processData: false,
              success: function () {
                location.reload ();
              },
              error: function () {
                $('#uploadMediaError').fadeIn (120);
              }
            });
        });

        $('[data-close]').on ('click', function () {
          $(this).closest ('.alert').fadeOut (200);
        });

        function commitDone (preview=false) {
          let append = '/';
          if (preview) {
            append = ':3000/';
          }
          window.open ('https://' + window.location.hostname + append, 'sprintplank');
          location.reload ();
        }

        $("a[rel|='preview']").click (function (event) {
          event.preventDefault ();
          $.get ('/checkStatus', function () {
            $('#commitModal').modal ();
            $('#commitModal #branchModal').html ('<b>Preview</b>');
            $('#commitModal .commit').click (function (event) {
              $.get ('/commitToPreview', function () {
                setTimeout (function () {
                  commitDone (true);
                }, 1500);
              });
            });
          }).fail (function () {
            commitDone (true);
          });
        });

        $("a[rel|='publish']").click (function (event) {
          event.preventDefault ();
          $.get ('/checkStatus', function () {
            alert ('There are still uncommited changes on preview...');
          }).fail (function () {
            $.get ('/checkMerge', function () {
              $('#commitModal').modal ();
              $('#commitModal #branchModal').html ('<b>Master</b>');
              $('#commitModal .commit').click (function (event) {
                $.get ('/commitToMaster', function () {
                  setTimeout (function () {
                    commitDone ();
                  }, 1500);
                });
              });
            }).fail (function () {
              commitDone ();
            });
          });
        });

      });
    </script>
  </body>
</html>